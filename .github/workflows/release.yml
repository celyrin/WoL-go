name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'

      - name: Check out code
        uses: actions/checkout@v2

      # Build binary for linux/amd64
      - name: Build binary for Linux AMD64
        run: |
          export GOOS=linux
          export GOARCH=amd64
          go mod tidy
          go build -o WoL-go-linux-amd64 -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for linux/386
      - name: Build binary for Linux 386
        run: |
          export GOOS=linux
          export GOARCH=386
          go mod tidy
          go build -o WoL-go-linux-386 -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for linux/arm
      - name: Build binary for Linux ARM
        run: |
          export GOOS=linux
          export GOARCH=arm
          go mod tidy
          go build -o WoL-go-linux-arm -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for linux/arm64
      - name: Build binary for Linux ARM64
        run: |
          export GOOS=linux
          export GOARCH=arm64
          go mod tidy
          go build -o WoL-go-linux-arm64 -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for windows/amd64
      - name: Build binary for Windows AMD64
        run: |
          export GOOS=windows
          export GOARCH=amd64
          go mod tidy
          go build -o WoL-go-windows-amd64.exe -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for windows/386
      - name: Build binary for Windows 386
        run: |
          export GOOS=windows
          export GOARCH=386
          go mod tidy
          go build -o WoL-go-windows-386.exe -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for darwin/amd64
      - name: Build binary for Darwin AMD64
        run: |
          export GOOS=darwin
          export GOARCH=amd64
          go mod tidy
          go build -o WoL-go-darwin-amd64 -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      # Build binary for darwin/arm64
      - name: Build binary for Darwin ARM64
        run: |
          export GOOS=darwin
          export GOARCH=arm64
          go mod tidy
          go build -o WoL-go-darwin-arm64 -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # Upload binary for linux/amd64
      - name: Upload Linux AMD64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-linux-amd64
          asset_name: WoL-go-linux-amd64
          asset_content_type: application/octet-stream

      # Upload binary for linux/386
      - name: Upload Linux 386 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-linux-386
          asset_name: WoL-go-linux-386
          asset_content_type: application/octet-stream

      # Upload binary for linux/arm
      - name: Upload Linux ARM Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-linux-arm
          asset_name: WoL-go-linux-arm
          asset_content_type: application/octet-stream

      # Upload binary for linux/arm64
      - name: Upload Linux ARM64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-linux-arm64
          asset_name: WoL-go-linux-arm64
          asset_content_type: application/octet-stream

      # Upload binary for windows/amd64
      - name: Upload Windows AMD64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-windows-amd64.exe
          asset_name: WoL-go-windows-amd64.exe
          asset_content_type: application/octet-stream

      # Upload binary for windows/386
      - name: Upload Windows 386 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-windows-386.exe
          asset_name: WoL-go-windows-386.exe
          asset_content_type: application/octet-stream

      # Upload binary for darwin/amd64
      - name: Upload Darwin AMD64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-darwin-amd64
          asset_name: WoL-go-darwin-amd64
          asset_content_type: application/octet-stream

      # Upload binary for darwin/arm64
      - name: Upload Darwin ARM64 Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoL-go-darwin-arm64
          asset_name: WoL-go-darwin-arm64
          asset_content_type: application/octet-stream


