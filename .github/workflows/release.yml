name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: 386
          - goos: linux
            goarch: arm
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: 386
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18' 

    - name: Check out code
      uses: actions/checkout@v2

    - name: Build binary
      run: |
        export GOOS=${{ matrix.goos }}
        export GOARCH=${{ matrix.goarch }}
        go mod tidy
        go build -o WoL-go-${{ matrix.goos }}-${{ matrix.goarch }} -ldflags "-X main.defaultMode=release -extldflags '-static'" main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: WoL-go-${{ matrix.goos }}-${{ matrix.goarch }}
        path: WoL-go-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./WoL-go-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_name: WoL-go-${{ matrix.goos }}-${{ matrix.goarch }}
        asset_content_type: application/octet-stream
